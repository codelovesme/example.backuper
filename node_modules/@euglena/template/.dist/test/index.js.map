{"version":3,"sources":["test/index.ts"],"names":[],"mappings":"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","file":"test/index.js","sourcesContent":["\nimport * as euglena from \"@euglena/core\";\nimport * as euglena_template from \"../src/index\";\nimport {sys,js} from \"cessnalib\";\nimport * as chai from \"chai\";\n\nimport Particle = euglena.AnyParticle;\n\nimport Class = js.Class;\nimport tools = euglena_template.subscription.StaticTools;\n\ndescribe(\"euglena.template\", () => {\n    describe(\"being\", () => {\n        describe(\"subscription\", () => {\n            describe(\"StaticTools\", () => {\n                it(\"addSubscription\", () => {\n                    //given\n                    let particle = { meta: { name: \"Token\" } };\n                    let euglenaName = \"idcore\";\n                    //when\n                    let result = tools.addSubscription(particle as euglena.AnyParticle, euglenaName);\n                    //then\n                    chai.expect(tools[\"subscriptionDict\"]).to.has.length(1);\n                    chai.expect(tools[\"subscriptionDict\"][0]).property('particle',particle);\n                    chai.expect(tools[\"subscriptionDict\"][0]['euglenas']).to.has.length(1);\n                    chai.expect(tools[\"subscriptionDict\"][0]['euglenas']).to.contains(euglenaName);\n                });\n                it(\"removeSubscription\", () => {\n                    //given\n                    let particle = { meta: { name: \"Token\" } };\n                    let euglenaName = \"idcore\";\n                    let result = tools.addSubscription(particle as euglena.AnyParticle, euglenaName);\n                    //when\n                    tools.removeSubscription(particle as Particle,euglenaName);\n                    //after then\n                    chai.expect(tools[\"subscriptionDict\"]).to.has.length(1);\n                    chai.expect(tools[\"subscriptionDict\"][0]).property('particle');\n                    chai.expect(tools[\"subscriptionDict\"][0]['euglenas']).to.has.length(0);\n                });\n                it(\"removeSubscriptions\", () => {\n                    //given\n                    let particle = { meta: { name: \"Token\" } };\n                    let euglenaName = \"idcore\";\n                    let result = tools.addSubscription(particle as euglena.AnyParticle, euglenaName);\n                    //when\n                    tools.removeSubscriptions(particle as Particle);\n                    //after then\n                    chai.expect(tools[\"subscriptionDict\"]).to.has.length(0);\n                });\n            });\n        });\n    });\n});"],"sourceRoot":"/source/"}